import os
import telebot
import time
from datetime import datetime
from openai import OpenAI
import requests
from io import BytesIO
from loguru import logger
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Loguru
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add("bot_logs/bot_{time}.log", rotation="10 MB", compression="zip", backtrace=True, diagnose=True)
logger.add(lambda msg: print(msg), level="INFO",
           format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")

# –¢–æ–∫–µ–Ω—ã API (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = "7617140226:AAHxsSC3rlhMUPn7tNRDZltoK1vy4V35N8k"
OPENAI_API_KEY = "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"
ADMIN_ID = "5178922969"  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∏ Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)


def get_local_image(prompt):
    """–ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –ø–æ –∫–ª—é—á—É ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO, –∏–Ω–∞—á–µ None"""
    prompt_to_filename = {
        "–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç": "squares/–∫—Ä–∞—Å–Ω—ã–π_–∫–≤–∞–¥—Ä–∞—Ç.png",
        "—Å–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç": "squares/—Å–∏–Ω–∏–π_–∫–≤–∞–¥—Ä–∞—Ç.png"
    }
    for key, filename in prompt_to_filename.items():
        if key in prompt.lower():
            full_path = Path(filename)
            if full_path.exists():
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {full_path}")
                return BytesIO(full_path.read_bytes())
            else:
                logger.warning(f"–§–∞–π–ª {full_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ")
    return None


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}


def generate_image(prompt):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é DALL-E"""
    try:
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )

        image_url = response.data[0].url

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_response = requests.get(image_url)
        if image_response.status_code == 200:
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'")
            return BytesIO(image_response.content)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code}, –∑–∞–ø—Ä–æ—Å: '{prompt}'")
            return None
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{prompt}'")
        return None


def analyze_dialog(user_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –ø–æ–º–æ—â—å—é GPT-4o"""
    if user_id not in user_history or not user_history[user_id]:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞."

    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        history_text = "\n".join([f"–í—Ä–µ–º—è: {entry['time']}, –ó–∞–ø—Ä–æ—Å: {entry['prompt']}"
                                  for entry in user_history[user_id]])

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system",
                 "content": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç."},
                {"role": "user",
                 "content": f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{history_text}\n\n–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è."}
            ]
        )
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT-4o –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return response.choices[0].message.content
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–∞–ª–æ–≥–∞: {str(e)}"


def send_admin_report(user_id, username):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_history or not user_history[user_id]:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} ({username})")
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})"
    analysis = analyze_dialog(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    history_text = "\n".join([f"‚Ä¢ {entry['time']}: \"{entry['prompt']}\""
                              for entry in user_history[user_id]])

    report = f"üìä –û–¢–ß–ï–¢ –û –î–ï–ô–°–¢–í–ò–Ø–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø üìä\n\n{user_info}\n\n"
    report += f"üìù –ê–ù–ê–õ–ò–ó:\n{analysis}\n\n"
    report += f"üìú –ò–°–¢–û–†–ò–Ø –ó–ê–ü–†–û–°–û–í:\n{history_text}"

    try:
        bot.send_message(ADMIN_ID, report)
        logger.success(f"–û—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    bot.reply_to(message,
                 "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
                 "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                 "‚Ä¢ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç\n"
                 "‚Ä¢ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç\n"
                 "‚Ä¢ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –§–µ—Ä—Ä–∞—Ä–∏\n\n"
                 "–ò —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(commands=['report'])
def handle_report(message):
    user_id = message.from_user.id

    if str(user_id) == ADMIN_ID:
        logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

        if not user_history:
            logger.info("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return

        for user_id, history in user_history.items():
            try:
                username = bot.get_chat(user_id).username or f"User_{user_id}"
                send_admin_report(user_id, username)
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        bot.reply_to(message, "–û—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /report")
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    prompt = message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {username} (ID: {user_id}): '{prompt}'")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    if user_id not in user_history:
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        user_history[user_id] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bot.send_message(message.chat.id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data = get_local_image(prompt)

    # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ
    if image_data is None:
        logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{prompt}', –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ")
        image_data = generate_image(prompt)
    else:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{prompt}'")

    if image_data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bot.send_photo(message.chat.id, image_data)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_history[user_id].append({
            'time': current_time,
            'prompt': prompt
        })
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(user_history[user_id])}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª 3 –∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        if len(user_history[user_id]) % 3 == 0:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ {len(user_history[user_id])} –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç")
            send_admin_report(user_id, username)
    else:
        bot.send_message(message.chat.id,
                         "üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{prompt}'")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("bot_logs", exist_ok=True)
    os.makedirs("squares", exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for image_name in ["–∫—Ä–∞—Å–Ω—ã–π_–∫–≤–∞–¥—Ä–∞—Ç.png", "—Å–∏–Ω–∏–π_–∫–≤–∞–¥—Ä–∞—Ç.png"]:
        if not Path(f"squares/{image_name}").exists():
            logger.warning(f"–§–∞–π–ª {image_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ squares. "
                           f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ API.")

    logger.info("==========================================")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    logger.info("==========================================")

    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞")